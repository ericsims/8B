;;
; @file
; @author Eric Sims
;
; @section Description
; tests 8 bit logic functions
;
; @section Test Coverage
; @coverage add_a_b or_a_b xor_a_b lshift_a rshift_a
;
;;

#include "../src/CPU.asm"

#bank rom

; AND tests
; 0x00 & 0x00 = 0x00
load a, #0x00
load b, #0x00
and a, b
assert a, #0x00
; 0x00 & 0xFF = 0x00
load a, #0x00
load b, #0xFF
and a, b
assert a, #0x00    
; 0xFF & 0xFF = 0xFF
load a, #0xFF
load b, #0xFF
and a, b
assert a, #0xFF
; 0x12 & 0x34 = 0x10
load a, #0x12
load b, #0x34
and a, b
assert a, #0x10




; OR tests
; 0x00 | 0x00 = 0x00
load a, #0x00
load b, #0x00
or a, b
assert a, #0x00
; 0x00 | 0xFF = 0xFF
load a, #0x00
load b, #0xFF
or a, b
assert a, #0xFF   
; 0xFF | 0xFF = 0xFF
load a, #0xFF
load b, #0xFF
or a, b
assert a, #0xFF
; 0x12 | 0x34 = 0x53
load a, #0x12
load b, #0x34
or a, b
assert a, #0x36


; XOR tests
; 0x00 ^ 0x00 = 0x00
load a, #0x00
load b, #0x00
xor a, b
assert a, #0x00
; 0x00 ^ 0xFF = 0xFF
load a, #0x00
load b, #0xFF
xor a, b
assert a, #0xFF   
; 0xFF ^ 0xFF = 0x00
load a, #0xFF
load b, #0xFF
xor a, b
assert a, #0x00
; 0x12 | 0x34 = 0x26
load a, #0x12
load b, #0x34
xor a, b
assert a, #0x26


; left sfhit tests
; 0x00 << 1 = 0x00
load a, #0x00
lshift a
assert a, #0x00
; 0x02 << 1 = 0x04
load a, #0x02
lshift a
assert a, #0x04
; 0xFF << 1 = 0xFE
load a, #0xFF
lshift a
assert a, #0xFE
; 0x12 << 1 = 0x24
load a, #0x12
lshift a
assert a, #0x24


; right shift tests
; 0x00 >> 1 = 0x00
load a, #0x00
rshift a
assert a, #0x00
; 0x02 >> 1 = 0x01
load a, #0x02
rshift a
assert a, #0x01
; 0xFF >> 1 = 0x7F
load a, #0xFF
rshift a
assert a, #0x7F
; 0x12 >> 1 = 0x09
load a, #0x12
rshift a
assert a, #0x09


halt